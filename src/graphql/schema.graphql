# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union GenericMorph = Album | Article | ComponentCommercialCommercialisation | ComponentHomeHome | GalleryPage | HomePage | I18NLocale | Newspost | PartnerProfile | Photoshoot | Play | SpectatorProfile | TalentProfile | UploadFile | UploadFolder | UserRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | Video

type Album {
  audio_files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection!
  commerce: ComponentCommercialCommercialisation!
  createdAt: DateTime
  description: String
  talent_id(filters: TalentProfileFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TalentProfileRelationResponseCollection
  thumbnail: UploadFileEntityResponse
  title: String!
  updatedAt: DateTime
}

type AlbumEntity {
  attributes: Album
  id: ID
}

type AlbumEntityResponse {
  data: AlbumEntity
}

type AlbumEntityResponseCollection {
  data: [AlbumEntity!]!
  meta: ResponseCollectionMeta!
}

type AlbumRelationResponseCollection {
  data: [AlbumEntity!]!
}

type Article {
  body: String
  commerce: ComponentCommercialCommercialisation!
  createdAt: DateTime
  documents(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  publishedAt: DateTime
  thumbnail: UploadFileEntityResponse
  title: String!
  updatedAt: DateTime
  user_id: UsersPermissionsUserEntityResponse
}

type ArticleEntity {
  attributes: Article
  id: ID
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

type ComponentCommercialCommercialisation {
  id: ID!
  price: Float
  profit_type: ENUM_COMPONENTCOMMERCIALCOMMERCIALISATION_PROFIT_TYPE!
}

type ComponentHomeHome {
  description: String
  id: ID!
}

type GalleryPage {
  createdAt: DateTime
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type GalleryPageEntity {
  attributes: GalleryPage
  id: ID
}

type GalleryPageEntityResponse {
  data: GalleryPageEntity
}

type HomePage {
  createdAt: DateTime
  publishedAt: DateTime
  section_a: ComponentHomeHome
  title: String!
  updatedAt: DateTime
}

type HomePageEntity {
  attributes: HomePage
  id: ID
}

type HomePageEntityResponse {
  data: HomePageEntity
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

type Mutation {
  "Change user password. Confirm with the current password."
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createAlbum(data: AlbumInput!): AlbumEntityResponse
  createArticle(data: ArticleInput!): ArticleEntityResponse
  createNewspost(data: NewspostInput!): NewspostEntityResponse
  createPartnerProfile(data: PartnerProfileInput!): PartnerProfileEntityResponse
  createPhotoshoot(data: PhotoshootInput!): PhotoshootEntityResponse
  createPlay(data: PlayInput!): PlayEntityResponse
  createSpectatorProfile(data: SpectatorProfileInput!): SpectatorProfileEntityResponse
  createTalentProfile(data: TalentProfileInput!): TalentProfileEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  createUserRole(data: UserRoleInput!): UserRoleEntityResponse
  "Create a new role"
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  "Create a new user"
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createVideo(data: VideoInput!): VideoEntityResponse
  deleteAlbum(id: ID!): AlbumEntityResponse
  deleteArticle(id: ID!): ArticleEntityResponse
  deleteGalleryPage: GalleryPageEntityResponse
  deleteHomePage: HomePageEntityResponse
  deleteNewspost(id: ID!): NewspostEntityResponse
  deletePartnerProfile(id: ID!): PartnerProfileEntityResponse
  deletePhotoshoot(id: ID!): PhotoshootEntityResponse
  deletePlay(id: ID!): PlayEntityResponse
  deleteSpectatorProfile(id: ID!): SpectatorProfileEntityResponse
  deleteTalentProfile(id: ID!): TalentProfileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  deleteUserRole(id: ID!): UserRoleEntityResponse
  "Delete an existing role"
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  "Delete an existing user"
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  deleteVideo(id: ID!): VideoEntityResponse
  "Confirm an email users email address"
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  "Request a reset password token"
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  "Register a user"
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  "Reset user password. Confirm with a code (resetToken from forgotPassword)"
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAlbum(data: AlbumInput!, id: ID!): AlbumEntityResponse
  updateArticle(data: ArticleInput!, id: ID!): ArticleEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGalleryPage(data: GalleryPageInput!): GalleryPageEntityResponse
  updateHomePage(data: HomePageInput!): HomePageEntityResponse
  updateNewspost(data: NewspostInput!, id: ID!): NewspostEntityResponse
  updatePartnerProfile(data: PartnerProfileInput!, id: ID!): PartnerProfileEntityResponse
  updatePhotoshoot(data: PhotoshootInput!, id: ID!): PhotoshootEntityResponse
  updatePlay(data: PlayInput!, id: ID!): PlayEntityResponse
  updateSpectatorProfile(data: SpectatorProfileInput!, id: ID!): SpectatorProfileEntityResponse
  updateTalentProfile(data: TalentProfileInput!, id: ID!): TalentProfileEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  updateUserRole(data: UserRoleInput!, id: ID!): UserRoleEntityResponse
  "Update an existing role"
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  "Update an existing user"
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  updateVideo(data: VideoInput!, id: ID!): VideoEntityResponse
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Newspost {
  body: String!
  createdAt: DateTime
  publishedAt: DateTime
  thumbnail: UploadFileEntityResponse
  title: String!
  updatedAt: DateTime
  user_id: UsersPermissionsUserEntityResponse
}

type NewspostEntity {
  attributes: Newspost
  id: ID
}

type NewspostEntityResponse {
  data: NewspostEntity
}

type NewspostEntityResponseCollection {
  data: [NewspostEntity!]!
  meta: ResponseCollectionMeta!
}

type NewspostRelationResponseCollection {
  data: [NewspostEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

type PartnerProfile {
  createdAt: DateTime
  description: String!
  fee_share: Int
  first_name: String!
  last_name: String
  partner_type: ENUM_PARTNERPROFILE_PARTNER_TYPE!
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
  url: String
}

type PartnerProfileEntity {
  attributes: PartnerProfile
  id: ID
}

type PartnerProfileEntityResponse {
  data: PartnerProfileEntity
}

type PartnerProfileEntityResponseCollection {
  data: [PartnerProfileEntity!]!
  meta: ResponseCollectionMeta!
}

type Photoshoot {
  commerce: ComponentCommercialCommercialisation!
  createdAt: DateTime
  description: String
  publishedAt: DateTime
  thumbnail: UploadFileEntityResponse
  title: String!
  updatedAt: DateTime
  user_id: UsersPermissionsUserEntityResponse
}

type PhotoshootEntity {
  attributes: Photoshoot
  id: ID
}

type PhotoshootEntityResponse {
  data: PhotoshootEntity
}

type PhotoshootEntityResponseCollection {
  data: [PhotoshootEntity!]!
  meta: ResponseCollectionMeta!
}

type PhotoshootRelationResponseCollection {
  data: [PhotoshootEntity!]!
}

type Play {
  commerce: ComponentCommercialCommercialisation!
  createdAt: DateTime
  description: String
  preview_photos(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  publishedAt: DateTime
  thumbnail: UploadFileEntityResponse
  title: String!
  updatedAt: DateTime
  user_id: UsersPermissionsUserEntityResponse
  video: UploadFileEntityResponse!
}

type PlayEntity {
  attributes: Play
  id: ID
}

type PlayEntityResponse {
  data: PlayEntity
}

type PlayEntityResponseCollection {
  data: [PlayEntity!]!
  meta: ResponseCollectionMeta!
}

type PlayRelationResponseCollection {
  data: [PlayEntity!]!
}

type Query {
  album(id: ID): AlbumEntityResponse
  albums(filters: AlbumFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): AlbumEntityResponseCollection
  article(id: ID): ArticleEntityResponse
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleEntityResponseCollection
  galleryPage(publicationState: PublicationState = LIVE): GalleryPageEntityResponse
  homePage(publicationState: PublicationState = LIVE): HomePageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  newspost(id: ID): NewspostEntityResponse
  newsposts(filters: NewspostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewspostEntityResponseCollection
  partnerProfile(id: ID): PartnerProfileEntityResponse
  partnerProfiles(filters: PartnerProfileFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PartnerProfileEntityResponseCollection
  photoshoot(id: ID): PhotoshootEntityResponse
  photoshoots(filters: PhotoshootFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PhotoshootEntityResponseCollection
  play(id: ID): PlayEntityResponse
  plays(filters: PlayFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PlayEntityResponseCollection
  spectatorProfile(id: ID): SpectatorProfileEntityResponse
  spectatorProfiles(filters: SpectatorProfileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SpectatorProfileEntityResponseCollection
  talentProfile(id: ID): TalentProfileEntityResponse
  talentProfiles(filters: TalentProfileFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TalentProfileEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  userRole(id: ID): UserRoleEntityResponse
  userRoles(filters: UserRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UserRoleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  video(id: ID): VideoEntityResponse
  videos(filters: VideoFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): VideoEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SpectatorProfile {
  createdAt: DateTime
  first_name: String
  last_name: String
  phone_number: String!
  updatedAt: DateTime
}

type SpectatorProfileEntity {
  attributes: SpectatorProfile
  id: ID
}

type SpectatorProfileEntityResponse {
  data: SpectatorProfileEntity
}

type SpectatorProfileEntityResponseCollection {
  data: [SpectatorProfileEntity!]!
  meta: ResponseCollectionMeta!
}

type TalentProfile {
  albums(filters: AlbumFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): AlbumRelationResponseCollection
  createdAt: DateTime
  facebook_url: String
  first_name: String
  instagram_url: String
  last_name: String!
  occupation: ENUM_TALENTPROFILE_OCCUPATION!
  phone_number: String!
  publishedAt: DateTime
  study_history: String
  updatedAt: DateTime
  work_history: String
}

type TalentProfileEntity {
  attributes: TalentProfile
  id: ID
}

type TalentProfileEntityResponse {
  data: TalentProfileEntity
}

type TalentProfileEntityResponseCollection {
  data: [TalentProfileEntity!]!
  meta: ResponseCollectionMeta!
}

type TalentProfileRelationResponseCollection {
  data: [TalentProfileEntity!]!
}

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UserRole {
  createdAt: DateTime
  name: ENUM_USERROLE_NAME
  updatedAt: DateTime
  user_id(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UserRoleEntity {
  attributes: UserRole
  id: ID
}

type UserRoleEntityResponse {
  data: UserRoleEntity
}

type UserRoleEntityResponseCollection {
  data: [UserRoleEntity!]!
  meta: ResponseCollectionMeta!
}

type UserRoleRelationResponseCollection {
  data: [UserRoleEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  avatar_url: String
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  newsposts(filters: NewspostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewspostRelationResponseCollection
  partner_profile: PartnerProfileEntityResponse
  photoshoots(filters: PhotoshootFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PhotoshootRelationResponseCollection
  plays(filters: PlayFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PlayRelationResponseCollection
  provider: String
  role: UsersPermissionsRoleEntityResponse
  spectator_profile: SpectatorProfileEntityResponse
  talent_profile: TalentProfileEntityResponse
  updatedAt: DateTime
  user_role(filters: UserRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UserRoleRelationResponseCollection
  username: String!
  videos(filters: VideoFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): VideoRelationResponseCollection
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type Video {
  commerce: ComponentCommercialCommercialisation!
  createdAt: DateTime
  description: String
  publishedAt: DateTime
  thumbnail: UploadFileEntityResponse
  title: String!
  updatedAt: DateTime
  user_id: UsersPermissionsUserEntityResponse
}

type VideoEntity {
  attributes: Video
  id: ID
}

type VideoEntityResponse {
  data: VideoEntity
}

type VideoEntityResponseCollection {
  data: [VideoEntity!]!
  meta: ResponseCollectionMeta!
}

type VideoRelationResponseCollection {
  data: [VideoEntity!]!
}

enum ENUM_COMPONENTCOMMERCIALCOMMERCIALISATION_PROFIT_TYPE {
  donation
  free
  sale
}

enum ENUM_PARTNERPROFILE_PARTNER_TYPE {
  director
  talant
  theatre
}

enum ENUM_TALENTPROFILE_OCCUPATION {
  actor
  choreographer
  director
  light_artist
  musician
  operator
  photographer
  singer
  sound_artist
}

enum ENUM_USERROLE_NAME {
  admin
  manager
  partner
  spectator
  talent
}

enum PublicationState {
  LIVE
  PREVIEW
}

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Upload` scalar type represents a file upload."
scalar Upload

input AlbumFiltersInput {
  and: [AlbumFiltersInput]
  commerce: ComponentCommercialCommercialisationFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: AlbumFiltersInput
  or: [AlbumFiltersInput]
  talent_id: TalentProfileFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input AlbumInput {
  audio_files: [ID]
  commerce: ComponentCommercialCommercialisationInput
  description: String
  talent_id: [ID]
  thumbnail: ID
  title: String
}

input ArticleFiltersInput {
  and: [ArticleFiltersInput]
  body: StringFilterInput
  commerce: ComponentCommercialCommercialisationFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ArticleFiltersInput
  or: [ArticleFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  user_id: UsersPermissionsUserFiltersInput
}

input ArticleInput {
  body: String
  commerce: ComponentCommercialCommercialisationInput
  documents: [ID]
  publishedAt: DateTime
  thumbnail: ID
  title: String
  user_id: ID
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

input ComponentCommercialCommercialisationFiltersInput {
  and: [ComponentCommercialCommercialisationFiltersInput]
  not: ComponentCommercialCommercialisationFiltersInput
  or: [ComponentCommercialCommercialisationFiltersInput]
  price: FloatFilterInput
  profit_type: StringFilterInput
}

input ComponentCommercialCommercialisationInput {
  id: ID
  price: Float
  profit_type: ENUM_COMPONENTCOMMERCIALCOMMERCIALISATION_PROFIT_TYPE
}

input ComponentHomeHomeInput {
  description: String
  id: ID
}

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

input GalleryPageInput {
  publishedAt: DateTime
  title: String
}

input HomePageInput {
  publishedAt: DateTime
  section_a: ComponentHomeHomeInput
  title: String
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

input NewspostFiltersInput {
  and: [NewspostFiltersInput]
  body: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: NewspostFiltersInput
  or: [NewspostFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  user_id: UsersPermissionsUserFiltersInput
}

input NewspostInput {
  body: String
  publishedAt: DateTime
  thumbnail: ID
  title: String
  user_id: ID
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

input PartnerProfileFiltersInput {
  and: [PartnerProfileFiltersInput]
  card_number: StringFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  fee_share: IntFilterInput
  first_name: StringFilterInput
  id: IDFilterInput
  last_name: StringFilterInput
  not: PartnerProfileFiltersInput
  or: [PartnerProfileFiltersInput]
  partner_type: StringFilterInput
  phone_number: StringFilterInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input PartnerProfileInput {
  card_number: String
  description: String
  fee_share: Int
  first_name: String
  last_name: String
  partner_type: ENUM_PARTNERPROFILE_PARTNER_TYPE
  phone_number: String
  publishedAt: DateTime
  title: String
  url: String
}

input PhotoshootFiltersInput {
  and: [PhotoshootFiltersInput]
  commerce: ComponentCommercialCommercialisationFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: PhotoshootFiltersInput
  or: [PhotoshootFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  user_id: UsersPermissionsUserFiltersInput
}

input PhotoshootInput {
  commerce: ComponentCommercialCommercialisationInput
  description: String
  publishedAt: DateTime
  thumbnail: ID
  title: String
  user_id: ID
}

input PlayFiltersInput {
  and: [PlayFiltersInput]
  commerce: ComponentCommercialCommercialisationFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: PlayFiltersInput
  or: [PlayFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  user_id: UsersPermissionsUserFiltersInput
}

input PlayInput {
  commerce: ComponentCommercialCommercialisationInput
  description: String
  preview_photos: [ID]
  publishedAt: DateTime
  thumbnail: ID
  title: String
  user_id: ID
  video: ID
}

input SpectatorProfileFiltersInput {
  and: [SpectatorProfileFiltersInput]
  createdAt: DateTimeFilterInput
  first_name: StringFilterInput
  id: IDFilterInput
  last_name: StringFilterInput
  not: SpectatorProfileFiltersInput
  or: [SpectatorProfileFiltersInput]
  phone_number: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SpectatorProfileInput {
  first_name: String
  last_name: String
  phone_number: String
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

input TalentProfileFiltersInput {
  albums: AlbumFiltersInput
  and: [TalentProfileFiltersInput]
  createdAt: DateTimeFilterInput
  facebook_url: StringFilterInput
  first_name: StringFilterInput
  id: IDFilterInput
  instagram_url: StringFilterInput
  last_name: StringFilterInput
  not: TalentProfileFiltersInput
  occupation: StringFilterInput
  or: [TalentProfileFiltersInput]
  phone_number: StringFilterInput
  publishedAt: DateTimeFilterInput
  study_history: StringFilterInput
  updatedAt: DateTimeFilterInput
  work_history: StringFilterInput
}

input TalentProfileInput {
  albums: [ID]
  facebook_url: String
  first_name: String
  instagram_url: String
  last_name: String
  occupation: ENUM_TALENTPROFILE_OCCUPATION
  phone_number: String
  publishedAt: DateTime
  study_history: String
  work_history: String
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

input UserRoleFiltersInput {
  and: [UserRoleFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UserRoleFiltersInput
  or: [UserRoleFiltersInput]
  updatedAt: DateTimeFilterInput
  user_id: UsersPermissionsUserFiltersInput
}

input UserRoleInput {
  name: ENUM_USERROLE_NAME
  user_id: [ID]
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  articles: ArticleFiltersInput
  avatar_url: StringFilterInput
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  newsposts: NewspostFiltersInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  partner_profile: PartnerProfileFiltersInput
  password: StringFilterInput
  photoshoots: PhotoshootFiltersInput
  plays: PlayFiltersInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  spectator_profile: SpectatorProfileFiltersInput
  talent_profile: TalentProfileFiltersInput
  updatedAt: DateTimeFilterInput
  user_role: UserRoleFiltersInput
  username: StringFilterInput
  videos: VideoFiltersInput
}

input UsersPermissionsUserInput {
  articles: [ID]
  avatar_url: String
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  newsposts: [ID]
  partner_profile: ID
  password: String
  photoshoots: [ID]
  plays: [ID]
  provider: String
  resetPasswordToken: String
  role: ID
  spectator_profile: ID
  talent_profile: ID
  user_role: [ID]
  username: String
  videos: [ID]
}

input VideoFiltersInput {
  and: [VideoFiltersInput]
  commerce: ComponentCommercialCommercialisationFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  not: VideoFiltersInput
  or: [VideoFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  user_id: UsersPermissionsUserFiltersInput
}

input VideoInput {
  commerce: ComponentCommercialCommercialisationInput
  description: String
  publishedAt: DateTime
  thumbnail: ID
  title: String
  user_id: ID
}
